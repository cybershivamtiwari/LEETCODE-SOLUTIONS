class Solution {
public:
    unordered_map<TreeNode*, int> m;
    vector<int> res;
    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {
        helper (root, target);
        dfs(root, 0, K);
        
        return res;
    }
    
    int helper (TreeNode* root, TreeNode* target) {
        if (target == root) {
            m[target] = 0;
            return 0;
        }
        if (!root)
            return -1;
        
        int left = helper(root->left, target);
        if (left != -1) {
            m[root] = 1+left;
            return 1+left;
        }
        
        int right = helper(root->right, target);
        if (right != -1) {
            m[root] = 1+right;
            return 1+right;
        }
        return -1;
    }
    
    void dfs (TreeNode *root, int lvl, int& k) {
        if (!root)
            return;
        if (m.find(root) != m.end())
            lvl = m[root];
        if (lvl==k)
            res.push_back(root->val);
        dfs(root->left, lvl+1, k);
        dfs(root->right, lvl+1, k);
    }
};
